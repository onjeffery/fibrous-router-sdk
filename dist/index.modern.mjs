var t;!function(t){t.UniswapV2="UniswapV2",t.UniswapV3="UniswapV3"}(t||(t={}));const n=t=>Number(t.replace("%",""));class o{constructor(t){this.url=void 0,this.url=t}async route(t){return await async function(t,n){const o=t+"?"+Object.keys(n).map(t=>t+"="+n[t]).join("&");return(await fetch(o)).json()}(this.url,t)}async tokenList(){const t=await fetch(this.url+"/tokens");if(t.ok)return t.json();throw new Error(t.statusText)}buildTransaction(t){const o=function(t,o,s){const r=10**6,e=[];let a=100;for(const o of t.route){const t=n(o.percent),s=t/a;a-=t;for(let t=0;t<o.swaps.length;t++){const r=o.swaps[t];let a=0==t?s:1,i=100;for(const t of r){const o=n(t.percent),s=o/i*a;i-=o,e.push([t.fromTokenAddress,t.toTokenAddress,(c=s,String(Math.floor(1e6*Number(c.toFixed(4))))),String(t.protocol),t.poolAddress])}}}var c;const i=BigInt(t.outputAmount)*BigInt((1-o)*r)/BigInt(r);return[String(e.length),...e.flat(),t.inputToken.address,t.outputToken.address,t.inputAmount,"0",String(i),"0",s]}(t.route,t.slippage,t.accountAddress);return{contractAddress:t.routerAddress,entryPoint:"swap",call_data:o}}}export{o as Router};
