!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("starknet")):"function"==typeof define&&define.amd?define(["exports","starknet"],t):t((e||self).fibrousRouterSdk={},e.starknet)}(this,function(e,t){const o=(e,t)=>`${e}?${Object.keys(t).map(e=>`${e}=${t[e]}`).join("&")}`,r=e=>{const t={};return null!=e&&(t["X-API-Key"]=e),t},n=e=>Number(e.replace("%","")),s=e=>String(Math.floor(1e6*Number(e.toFixed(4))));function i(e,o,r){const i=10**6,c=e=>{const o=t.uint256.bnToUint256(e);return[o.low,o.high]},u=[];let a=100;for(const t of e.route){const e=n(t.percent),o=e/a;a-=e;for(let e=0;e<t.swaps.length;e++){const r=t.swaps[e];let i=0==e?o:1,c=100;for(const e of r){const t=n(e.percent),o=t/c*i;c-=t,u.push([e.fromTokenAddress,e.toTokenAddress,s(o),String(e.protocol),e.poolAddress])}}}const d=BigInt(e.outputAmount)*BigInt((1-o)*i)/BigInt(i);return[String(u.length),...u.flat(),e.inputToken.address,e.outputToken.address,...c(e.inputAmount),...c(d),r]}e.Protocols={mySwap:1,JediSwap:2,"10K Swap":3,SithSwap:4},e.Router=class{constructor(e,t){this.DEFAULT_API_URL="https://api.fibrous.finance",this.ROUTER_ADDRESS="0x1b23ed400b210766111ba5b1e63e33922c6ba0c45e6ad56ce112e5f4c578e62",this.apiUrl=void 0,this.apiKey=void 0,e&&e.endsWith("/")&&(e=e.substring(0,e.length-1)),this.apiUrl=e??this.DEFAULT_API_URL,this.apiKey=t??null}getBestRoute(e,t,n,s){try{const i=this,c={amount:e,tokenInAddress:t,tokenOutAddress:n};for(const[e,t]of Object.entries(s??{}))"excludeProtocols"!=e?c[e]=t:c.excludeProtocols=t.join(",");const u=o(`${i.apiUrl}/route`,c);return Promise.resolve(fetch(u,{headers:r(i.apiKey)}).then(e=>e.json()))}catch(e){return Promise.reject(e)}}supportedTokens(){try{const e=this;return Promise.resolve(fetch(`${e.apiUrl}/tokens`,{headers:r(e.apiKey)}).then(e=>e.json())).then(function(e){return e.reduce((e,t)=>Object.assign(e,{[t.symbol]:t}),{})})}catch(e){return Promise.reject(e)}}supportedProtocols(){try{const e=this;return Promise.resolve(fetch(`${e.apiUrl}/protocols`,{headers:r(e.apiKey)}).then(e=>e.json())).then(function(e){return e.reduce((e,t,o)=>Object.assign(e,{[t]:o+1}),{})})}catch(e){return Promise.reject(e)}}buildTransaction(e,t,o){return{contractAddress:this.ROUTER_ADDRESS,entryPoint:"swap",call_data:i(e,t,o)}}},e.buildHeaders=r,e.buildRouteUrl=o,e.buildSwapCalldata=i,e.parsePercent=s,e.trimPercent=n});
